#!/usr/bin/env node
/**
 * A test run is one execution of multiple tests each with multiple assertions.
 * It will create a summary about all the tests and measure the runtime.
 *
 */
var TestRun = /** @class */ (function () {
    function TestRun(name, quiet) {
        if (quiet === void 0) { quiet = false; }
        this.log = new Log();
        this.sums = new Summary();
        this.name = name;
        this.log.setQuiet(quiet);
        this.log.log("\n============================================");
        this.log.log("Run: " + name);
    }
    TestRun.prototype.getLog = function () {
        return this.log;
    };
    TestRun.prototype.assertTrue = function (description, actual) {
        if (actual) {
            this.log.logOk("OK: " + description);
            this.sums.addSuccess();
        }
        else {
            this.log.logFailure("Failed: " + description);
            this.sums.addFailure();
        }
    };
    TestRun.prototype.assertEqual = function (description, expected, actual) {
        if (expected == actual) {
            this.log.logOk("OK: " + description);
            this.sums.addSuccess();
        }
        else {
            this.log.logFailure("Failed: " + description + ", expected: " + expected + ", actual: " + actual);
            this.sums.addFailure();
        }
    };
    TestRun.prototype.assertNull = function (description, value) {
        if (value == null) {
            this.log.logOk("OK: " + description);
            this.sums.addSuccess();
        }
        else {
            this.log.logFailure("Failed: " + description + ", expected: null, actual: " + value);
            this.sums.addFailure();
        }
    };
    TestRun.prototype.assertNotNull = function (description, value) {
        if (value != null) {
            this.log.logOk("OK: " + description);
            this.sums.addSuccess();
        }
        else {
            this.log.logFailure("Failed: " + description + ", expected: not null, actual: null");
            this.sums.addFailure();
        }
    };
    TestRun.prototype.setup = function (setupCode) {
        this.setupCode = setupCode;
    };
    TestRun.prototype.cleanup = function (cleanupCode) {
        this.cleanupCode = cleanupCode;
    };
    /**
     * Perform the test of one feature or story.
     * Perform setup code before the test and cleanup code after the test.
     *
     * @param testName Name of the feature or story or test
     * @param testCode The code containing the assertions
     *
     */
    TestRun.prototype.test = function (testName, testCode) {
        this.sums.countTest();
        this.log.log("");
        this.log.log("--------------------------------------------");
        this.log.log("Test: " + testName);
        var result = new TestResult(testName);
        result.start();
        var tt0 = new Date().getTime();
        try {
            try {
                if (this.setupCode != null) {
                    this.setupCode();
                }
            }
            catch (ex) {
                this.log.logError("Error in setup: " + testName + " " + ex);
                this.sums.addError();
                result.logError("Error in setup: " + ex);
                return;
            }
            try {
                testCode();
            }
            catch (ex) {
                this.log.logError("Error: " + testName + " " + ex);
                this.sums.addError();
                result.logError(testName + " " + ex);
            }
            try {
                if (this.cleanupCode != null) {
                    this.cleanupCode();
                }
            }
            catch (ex) {
                this.log.log("Error in cleanup: " + testName + " " + ex);
                result.logError("Error in cleanup: " + " " + ex);
            }
        }
        finally {
            this.log.log("Runtime " + (new Date().getTime() - tt0) + " ms");
        }
    };
    TestRun.prototype.getSummary = function () {
        return this.sums;
    };
    TestRun.prototype.logSummary = function () {
        this.sums.log(this.log);
    };
    return TestRun;
}());
var Log = /** @class */ (function () {
    function Log() {
        this.quiet = false;
        this.logSuccesses = false;
        this.text = "";
    }
    Log.prototype.log = function (line) {
        if (!this.quiet) {
            console.log(line);
            this.text += line + "\n";
        }
    };
    Log.prototype.logOk = function (line) {
        if (this.logSuccesses) {
            this.log("_____ " + line);
        }
    };
    Log.prototype.logFailure = function (line) {
        this.log("##### " + line);
    };
    Log.prototype.logError = function (line) {
        this.log("%%%%% " + line);
    };
    Log.prototype.setQuiet = function (quiet) {
        this.quiet = quiet;
    };
    Log.prototype.setLogSuccesses = function (logSuccesses) {
        this.logSuccesses = logSuccesses;
    };
    Log.prototype.getText = function () {
        return this.text;
    };
    return Log;
}());
var TestResult = /** @class */ (function () {
    function TestResult(testName) {
        this.status = "NEW";
        this.testName = testName;
    }
    /**
     * Start test, record time
     *
     */
    TestResult.prototype.start = function () {
        this.startTime = new Date().getTime();
        this.status = "RUNNING";
    };
    /**
     * Stop test, record time
     *
     */
    TestResult.prototype.stop = function () {
        this.runTime = new Date().getTime() - this.startTime;
    };
    /**
     * Mark test as error
     *
     * @param message Error message
     *
     */
    TestResult.prototype.logError = function (message) {
        this.stop();
        this.status = "ERROR";
    };
    return TestResult;
}());
var Summary = /** @class */ (function () {
    function Summary() {
        this.testCount = 0;
        this.successCount = 0;
        this.failureCount = 0;
        this.errorCount = 0;
        this.t0 = new Date().getTime();
    }
    Summary.prototype.countTest = function () {
        this.testCount++;
    };
    Summary.prototype.addSuccess = function () {
        this.successCount++;
    };
    Summary.prototype.addFailure = function () {
        this.failureCount++;
    };
    Summary.prototype.addError = function () {
        this.errorCount++;
    };
    Summary.prototype.allOk = function () {
        return this.failureCount + this.errorCount == 0;
    };
    Summary.prototype.getSuccesses = function () {
        return this.successCount;
    };
    Summary.prototype.getFailures = function () {
        return this.failureCount;
    };
    Summary.prototype.getErrors = function () {
        return this.errorCount;
    };
    Summary.prototype.noTests = function () {
        return this.successCount + this.failureCount + this.errorCount == 0;
    };
    Summary.prototype.getTestCount = function () {
        return this.testCount;
    };
    Summary.prototype.log = function (log) {
        log.log("");
        log.log("--------------------------------------------");
        log.log("Summary");
        log.log("");
        log.log("Sucessful assertions : " + this.successCount);
        log.log("Failed assertions    : " + this.failureCount);
        log.log("Errors               : " + this.errorCount);
        log.log("--------------------------------------------");
        log.log("Total test           : " + this.testCount);
        log.log("Total assertions     : " + (this.successCount + this.failureCount + this.errorCount));
        log.log("Total runtime        : " + (new Date().getTime() - this.t0) + " ms");
        log.log("");
        if (this.noTests()) {
            log.log("FAILED: No tests found.");
        }
        else if (this.allOk()) {
            log.log("SUCCESS: All OK");
        }
        else {
            log.log("FAILED: " + (this.failureCount + this.errorCount) + " Problem(s).");
        }
        log.log("============================================\n");
    };
    return Summary;
}());
/**
 * A parameter defines one unit of input to a task
 */
var Parameter = /** @class */ (function () {
    function Parameter(name, description, type, optional) {
        this.optional = false;
        this.name = name;
        this.description = description;
        this.type = type;
        this.optional = optional;
    }
    return Parameter;
}());
/**
 * A task can return ok, warning or error along with some text message
 */
var TaskResult = /** @class */ (function () {
    function TaskResult(error, warning, message) {
        this.error = false;
        this.warning = false;
        this.ok = function () {
            return !this.error;
        };
        this.error = error;
        this.warning = warning;
        this.message = message;
    }
    TaskResult.Message = function (message) { return new TaskResult(false, false, message); };
    ;
    TaskResult.Warning = function (message) { return new TaskResult(false, true, message); };
    ;
    TaskResult.Error = function (message) { return new TaskResult(true, false, message); };
    ;
    TaskResult.OK = function () { return new TaskResult(false, false, null); };
    return TaskResult;
}());
/**
 * A task is one operation which bee can perform
 */
var Task = /** @class */ (function () {
    // run: function( config ) {
    //   bee.node.run( config );
    // }
    function Task(tasks, description, parameters, run) {
        this.tasks = tasks;
        this.description = description;
        this.parameters = parameters;
        this.run = run;
    }
    return Task;
}());
var Tasks = /** @class */ (function () {
    function Tasks() {
        var tasks = this;
        this.exec = new Task(tasks, "Execute a shell command.", [new Parameter("command", "Complete command line to be executed", "string", false)], function (bee, input) {
            var command;
            if (typeof input === 'string' || input instanceof String) {
                command = "" + input;
            }
            else {
                command = input.command;
            }
            var result = TaskResult.OK();
            var execSync = require("child_process").execSync;
            try {
                if (commandLine.verbose) {
                    console.log("Shell command: " + command);
                }
                var output = execSync(command);
                if (output) {
                    result = TaskResult.Message("" + output);
                }
            }
            catch (error) {
                var message_1 = "";
                if (error.status) {
                    message_1 += "Return code: " + error.status + "\n";
                }
                if (error.message) {
                    message_1 += error.message + "\n";
                }
                if (error.stdout) {
                    message_1 += error.stdout + "\n";
                }
                if (error.stderr) {
                    message_1 += error.stderr + "\n";
                }
                result = TaskResult.Error(message_1);
            }
            return result;
        });
        this.tsc = new Task(tasks, "Compile typescript source file.", [
            new Parameter("file", "File or wildcard of files to compile", "string", true),
            new Parameter("files", "List of files to compile", "string", true),
            new Parameter("outDir", "Target directory for compiles js files", "string", true),
            new Parameter("outFile", "Target javascript file", "string", true)
        ], function (bee, config) {
            var file = "";
            var outDir = "";
            if (config) {
                if (config.file) {
                    file = " " + config.file;
                }
                if (config.files) {
                    for (var i = 0; i < config.files.length; i++) {
                        file += " " + config.files[i];
                    }
                }
                if (config.outDir) {
                    outDir = " -outDir " + config.outDir;
                }
                else if (config.outFile) {
                    outDir = " -outFile " + config.outFile;
                }
            }
            return tasks.exec.run(bee, "tsc" + file + outDir);
        });
        this.call = new Task(tasks, "Call a node script.", [
            new Parameter("file", "File name of node script", "string", false)
        ], function (bee, config) {
            if (!config || !config.file) {
                return TaskResult.Error("Error: no test script specified");
            }
            else {
                var path = require('path');
                var testScriptFile = path.resolve(config.file);
                var testScript = require(testScriptFile);
                testScript.test(bee);
                return TaskResult.OK();
                //return tasks.exec.run( bee, "node " + config.file );
            }
        });
        this.test = new Task(tasks, "Perform unit tests.", [
            new Parameter("test", "Name of test", "string", false)
        ], function (bee, config) {
            if (!config || !config.file) {
                return TaskResult.Error("Error: no test script specified");
            }
            else {
                var result = tasks.call.run(bee, config);
                if (!result.ok) {
                    return result;
                }
                if (!bee.getTestRun().getSummary().allOk()) {
                    return TaskResult.Error("Some tests failed");
                }
                else {
                    return TaskResult.OK();
                }
            }
        });
        this.rmdir = new Task(tasks, "Delete a directory and all its content.", [
            new Parameter("dir", "Name of a directory below the project directory.", "string", false)
        ], function (bee, config) {
            if (!config.dir) {
                return TaskResult.Error("Error: missing parameter config.dir");
            }
            else {
                var path = require('path');
                var workdir = path.resolve(".");
                var deletedir = path.resolve(config.dir);
                if (!deletedir.startsWith(workdir)) {
                    throw "Error: rmdir is not allowed outside of working directory.";
                }
                return tasks.exec.run(bee, "rm -r " + deletedir);
            }
        });
    }
    return Tasks;
}());
;
var Bee = /** @class */ (function () {
    function Bee(commandLine) {
        this.tasks = new Tasks();
        this.run = function (result) {
            if (result.error) {
                project.error = true;
                var message_2 = "Error";
                if (result.message) {
                    message_2 = result.message;
                }
                if (this.commandLine.nofail) {
                    console.log(message_2);
                    console.log("Continuing... (because --nofail is set)");
                }
                else {
                    throw message_2;
                }
            }
            else if (result.warning) {
                if (result.message) {
                    console.log(result.message);
                }
                else {
                    console.log("Warning");
                }
            }
            else {
                if (result.message) {
                    console.log(result.message);
                }
            }
        };
        this.commandLine = commandLine;
    }
    Bee.prototype.getTestRun = function () {
        if (!this.testRun) {
            this.testRun = new TestRun("Unnamed test", false);
        }
        return this.testRun;
    };
    return Bee;
}());
/**
 * --------------------------------------------------------------------------------------
 *
 * Why is this file here?
 *
 * Answer: bee is an antlike build system to perform some necessary tasks in this
 * project. This file contains the complete executable code for bee. Only nodejs is
 * required to run bee.
 *
 * The targets to be achieved in this project are defined in the file:
 *
 * build.js
 *
 * --------------------------------------------------------------------------------------
 */
var CommandLine = /** @class */ (function () {
    function CommandLine() {
        this.isEmpty = true;
        this.targets = [];
        this.runDefaultTarget = false;
        this.showProjectInformation = false;
        this.showDependencies = false;
        this.showInternalTargets = false;
        this.nodeps = false;
        this.nofail = false;
        this.verbose = false;
        this.listTasks = false;
        this.showHelp = false;
    }
    return CommandLine;
}());
/**
 * A target defines a step in the project build process
 */
var Target = /** @class */ (function () {
    function Target() {
    }
    return Target;
}());
/**
 * A unit test
 */
var Test = /** @class */ (function () {
    function Test() {
    }
    return Test;
}());
/**
 * The description of the current software project built with bee
 */
var Project = /** @class */ (function () {
    function Project() {
        this.error = false;
        this.targets = new Array();
        this.tests = new Array();
    }
    return Project;
}());
// -------------------------------------------------------------------
// command line execution
var t0 = Date.now();
console.log("# ==============================================================================");
console.log("");
console.log("                . - .         ___                         _");
console.log("              *       .       \\__))   //                 | |__   ___  ___");
console.log("           .            * .  <((_(()(o_o)                |  _ \\ / _ \\/ _ \\");
console.log("  .      *                    //  |\\                     | |_) |  __/  __/");
console.log("    * .                                                  |_.__/ \\___|\\___|");
console.log("                                                                       bee 0.4.0");
console.log("                      * to build and to serve *");
console.log("# ------------------------------------------------------------------------------");
var commandLine = parseCommandLine();
var bee = new Bee(commandLine);
var project = new Project();
if (commandLine.isEmpty) {
    console.log("");
    console.log("Use 'bee -h' to show help.");
}
else if (commandLine.showHelp) {
    usage(null);
}
else {
    project = loadBuildFile();
    if (project.error) {
        usage(project.errorMessage);
    }
    else if (commandLine.showProjectInformation) {
        usage(null);
    }
    else {
        if (commandLine.listTasks) {
            listTasks(commandLine.describeTask);
        }
        else {
            if (commandLine.runDefaultTarget) {
                if (!project.defaultTarget) {
                    usage("Error: Cannot run default target because no default target is defined.");
                }
                else {
                    console.log("Running default target: " + project.defaultTarget);
                    commandLine.targets.push(project.defaultTarget);
                }
            }
            if (commandLine.targets.length == 0 && !commandLine.showHelp) {
                usage("Please define one or more targets to run or run with option -d");
            }
            else {
                var alreadyCalled = new Object();
                for (var i = 0; i < commandLine.targets.length; i++) {
                    var targetName = commandLine.targets[i];
                    runTarget(targetName, alreadyCalled, project, null);
                    if (project.error && project.errorMessage) {
                        console.log(project.errorMessage);
                    }
                }
            }
        }
    }
}
console.log("");
console.log("# ------------------------------------------------------------------------------");
console.log("# Runtime " + (Date.now() - t0) + " ms");
var returnCode = 0;
if (project.error) {
    if (commandLine.nofail) {
        console.log("# SUCCESS: There were some failures, but --nofail was set. So yeah, I guess.");
    }
    else {
        console.log("# FAILED: Sorry. Bee failed.");
        returnCode = 1;
    }
}
else {
    console.log("# SUCCESS: Yeah! Bee finished its work succesfully.");
}
console.log("# ==============================================================================");
process.exit(returnCode);
// * * * ----------------------------------------------
function runTarget(targetName, alreadyCalled, project, parentTargetName) {
    var target = project.targets[targetName];
    if (!target) {
        project.error = true;
        project.errorMessage = "Error: target '" + targetName + "' not found.";
        return;
    }
    else {
        // call dependencies first
        if (target.depends && !commandLine.nodeps) {
            for (var i = 0; i < target.depends.length; i++) {
                var dependencyName = target.depends[i];
                runTarget(dependencyName, alreadyCalled, project, targetName);
                if (project.error && !commandLine.nofail) {
                    return;
                }
            }
        }
        if (!alreadyCalled[targetName]) {
            alreadyCalled[targetName] = true;
            var target_1 = project.targets[targetName];
            // call the actual target last
            try {
                log("");
                log("Performing target: '" + targetName + "'"
                    + (parentTargetName ? " (dependency of " + parentTargetName + ")" : ""));
                target_1.code(bee);
            }
            catch (error) {
                project.error = true;
                project.errorMessage = "Error in target '" + targetName + "':\n" + error;
            }
        }
    }
}
/**
 * Show a message and the usage information
 *
 * @param messageText Extra message
 *
 */
function usage(messageText) {
    if (commandLine.showHelp) {
        console.log("");
        console.log("Usage:");
        console.log("  bee [options] -d | [target [target2 [target3]  ..]]");
        console.log("");
        console.log("Runs the given targets or the default target.");
        console.log("");
        console.log("Options:");
        console.log("  -f <file> .......... load targets from <file> instead of the default 'build.js'");
        console.log("  -d ................. run the default target");
        console.log("  -p ................. show project information and targets");
        console.log("  -pp ................ show dependencies too");
        console.log("  -ppp ............... show internal targets too");
        console.log("  --nodeps ........... do not run depencies of targets");
        console.log("  --nofail ........... continue on errors");
        console.log("  -v ................. verbose, show more information on what is  executed");
        console.log("  -t ................. list all tasks");
    }
    if (commandLine.showProjectInformation) {
        console.log("");
        console.log("# ------------------------------------------------------------------------------");
        console.log("");
        if (project.name) {
            console.log("Project: ");
            console.log("  " + project.name + (project.description ? ": " + project.description : ""));
        }
        console.log("");
        console.log("Available targets:");
        try {
            var allTargetNames = Object.keys(project.targets);
            if (allTargetNames.length == 0) {
                console.log("  - no targets -");
            }
            else {
                var length_1 = 0;
                for (var i = 0; i < allTargetNames.length; i++) {
                    var targetName = allTargetNames[i];
                    length_1 = length_1 < targetName.length ? targetName.length : length_1;
                }
                for (var i = 0; i < allTargetNames.length; i++) {
                    var targetName = allTargetNames[i];
                    var target = project.targets[targetName];
                    if (!target.internal || commandLine.showInternalTargets) {
                        var line = "  " + targetName + " " + ".".repeat(length_1 + 6 - targetName.length)
                            + " " + (target.description ? target.description : " - no description -");
                        var sep = "";
                        if (commandLine.showDependencies) {
                            line += " (depends: ";
                            for (var ii = 0; ii < target.depends.length; ii++) {
                                line += sep + target.depends[ii];
                                sep = ", ";
                            }
                            line += ")";
                        }
                        console.log(line);
                    }
                }
            }
            console.log("");
            console.log("Default target: ");
            console.log(project.defaultTarget ? "  " + project.defaultTarget : "  - no default target -");
        }
        catch (exception) {
            console.log();
        }
    }
    if (messageText) {
        message(messageText);
    }
}
/**
 * Show error or other message
 *
 * @param message
 *
 */
function message(message) {
    console.log("");
    console.log("# ------------------------------------------------------------------------------");
    console.log(message);
}
/**
 * Log a line of text
 *
 * @param line Line to log
 *
 */
function log(line) {
    console.log(line);
}
/**
 * List all tasks
 *
 * @param Optional: if given describe this task in detail
 *
 */
function listTasks(taskName) {
    var taskNames = Object.keys(bee);
    if (taskName && taskNames.indexOf(taskName) != -1) {
        // describe a task in detail
        var task = bee[taskName];
        console.log("# Task: " + taskName);
        //console.log( "" );
        console.log("  Description: " + (task.description ? task.description : " - no description - "));
        if (!task.parameters) {
            console.log("  - no Parameters -");
        }
        else {
            console.log("  Parameters:");
            for (var i = 0; i < task.parameters.length; i++) {
                var parameter = task.parameters[i];
                var line = '    "' + parameter.name + '" (' + parameter.type + (parameter.optional ? ' optional' : '') + ')' + ' ...';
                var dots = 40 - line.length;
                if (dots < 0) {
                    dots = 0;
                }
                console.log(line + '.'.repeat(dots) + ' ' + parameter.description);
            }
        }
    }
    else {
        console.log("");
        console.log("Available tasks:");
        console.log("");
        var length_2 = 0;
        for (var i = 0; i < taskNames.length; i++) {
            var taskName_1 = taskNames[i];
            if (taskName_1.length > length_2) {
                length_2 = taskName_1.length;
            }
        }
        for (var i = 0; i < taskNames.length; i++) {
            var taskName_2 = taskNames[i];
            var task = bee[taskName_2];
            console.log("  " + taskName_2 + " " + ".".repeat(length_2 + 6 - taskName_2.length)
                + " " + (task.description ? task.description : " - no description -"));
        }
        console.log("");
        console.log("To show more information about a task, call:");
        console.log("");
        console.log("bee -t <taskname>");
    }
}
/**
 * Parse command line arguments in to an object for easy access
 *
 */
function parseCommandLine() {
    var commandLine = new CommandLine();
    var currentParamName = null;
    for (var i = 2; i < process.argv.length; i++) {
        commandLine.isEmpty = false;
        var arg = process.argv[i];
        if (currentParamName == null) {
            if (arg == "-f") {
                currentParamName = "targetFile";
                commandLine.targets = [];
            }
            else if (arg == "-d") {
                commandLine.runDefaultTarget = true;
            }
            else if (arg == "-p") {
                commandLine.showProjectInformation = true;
            }
            else if (arg == "-pp") {
                commandLine.showProjectInformation = true;
                commandLine.showDependencies = true;
            }
            else if (arg == "-ppp") {
                commandLine.showProjectInformation = true;
                commandLine.showDependencies = true;
                commandLine.showInternalTargets = true;
            }
            else if (arg == "--nodeps") {
                commandLine.nodeps = true;
            }
            else if (arg == "--nofail") {
                commandLine.nofail = true;
            }
            else if (arg == "-v") {
                commandLine.verbose = true;
            }
            else if (arg == "-t") {
                commandLine.listTasks = true;
                currentParamName = "describeTask";
            }
            else if (arg == "-h") {
                commandLine.showHelp = true;
            }
            else {
                commandLine.targets.push(arg);
            }
        }
        else {
            commandLine[currentParamName] = arg;
            currentParamName = null;
        }
    }
    return commandLine;
}
/**
 * Load the build.js (or alternative file) of target
 *
 * @return The project object with loaded target configuration or an error message
 *
 */
function loadBuildFile() {
    var project = new Project();
    var targetFileName = commandLine.targetFile;
    if (!targetFileName) {
        targetFileName = "build.js";
    }
    var path = require('path');
    targetFileName = path.resolve(targetFileName);
    var fs = require('fs');
    if (!fs.existsSync(targetFileName)) {
        project.error = true;
        project.errorMessage = "Error: target file '" + targetFileName + "' not found.";
    }
    else {
        try {
            var targetsFile = require(targetFileName);
            targetsFile.setup(project);
        }
        catch (error) {
            project.error = true;
            project.errorMessage = "Error in setup of target file '" + targetFileName + "':\n";
            if (error && error.stack) {
                project.errorMessage += error.stack;
            }
        }
    }
    return project;
}
